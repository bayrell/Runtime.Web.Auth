/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Auth;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Exceptions.RuntimeException;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.Cookie;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Runtime.Web.Auth.AuthBackend;
use Runtime.Web.Auth.AuthToken;


@ApiList{ "object_name": "Runtime.Web.Auth", "interface_name": "core.auth" }
class AuthApi
{
	
	/**
	 * Status api
	 */
	@ApiMethod{ "method_name": "login" }
	static async list loginAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		string username = request.data["username"] |> default string "";
		string password = request.data["password"] |> default string "";
		
		list res = await @.chainAsync(AuthBackend::CHAIN_LOGIN, [username, password, null]);
		AuthToken token = res[2] |> default AuthToken null;
		
		if (token == null)
		{
			throw new RuntimeException(_("Runtime.Web.Auth", "Unknown password or username"), rtl::ERROR_AUTH);
		}
		
		string cookie_name = @.config(["Runtime.Web.Auth", "COOKIE_NAME"]) |> default string "";
		string auth_private_key = @.config(["Runtime.Web.Auth", "AUTH_PRIVATE_KEY"]) |> default string "";
		if (cookie_name != "" and auth_private_key != "")
		{
			token = AuthBackend::sign(token, auth_private_key);
			
			Cookie cookie = new Cookie
			{
				"name": cookie_name,
				"value": token.token_str,
				"expire": token.expire,
				"path": "/",
				"httponly": true,
			};
			
			answer = answer::success(answer, token, _("Runtime.Web.Auth", "Ok"));
			answer = answer::addCookie(answer, cookie);
		}
		else
		{
			throw new RuntimeException(_("Runtime.Web.Auth", "Set up cookie name and private key"), rtl::ERROR_AUTH);
		}
		
		return [ request, answer ];
	}
	
	
	
	/**
	 * Status api
	 */
	@ApiMethod{ "method_name": "logout" }
	static async list logoutAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		AuthToken token = request.storage[classof AuthToken] |> default AuthToken null;
		if (token)
		{
			await @.chainAsync(AuthBackend::CHAIN_LOGOUT, [token]);
		}
		
		string cookie_name = @.config(["Runtime.Web.Auth", "COOKIE_NAME"]) |> default string "";
		if (cookie_name != "")
		{
			Cookie cookie = new Cookie
			{
				"name": cookie_name,
				"value": "",
				"expire": 0,
				"path": "/",
				"httponly": true,
			};
			
			answer = answer::addCookie(answer, cookie);
		}
		
		return [ request, answer ];
	}
	
	
}